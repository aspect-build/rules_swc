"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//swc/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
load("//swc/private:versions.bzl", "TOOL_VERSIONS")

# Expose as Public API
LATEST_VERSION = TOOL_VERSIONS.keys()[0]

_DOC = "Fetch external dependencies needed to run the SWC cli"
_ATTRS = {
    "swc_version": attr.string(values = TOOL_VERSIONS.keys(), default = LATEST_VERSION),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
    "integrity_hashes": attr.string_dict(),
}

def _swc_repo_impl(repository_ctx):
    filename = "swc-%s" % repository_ctx.attr.platform

    # The binaries of the SWC cli releases for windows are suffixed with ".exe"
    if repository_ctx.attr.platform.startswith("win32"):
        filename += ".exe"

    url = "https://github.com/swc-project/swc/releases/download/{0}/{1}".format(
        repository_ctx.attr.swc_version,
        filename,
    )

    integrity = repository_ctx.attr.integrity_hashes.get(
        repository_ctx.attr.platform,
        None,
    )
    if not integrity:
        if repository_ctx.attr.swc_version not in TOOL_VERSIONS.keys():
            fail("""\
swc version {} does not have hashes mirrored in aspect_rules_swc, please either
    - Set the integrity_hashes attribute to a dictionary of platform/hash
    - Choose one of the mirrored versions: {}
""".format(repository_ctx.attr.swc_version, TOOL_VERSIONS.keys()))

        integrity = TOOL_VERSIONS[repository_ctx.attr.swc_version][repository_ctx.attr.platform]

    repository_ctx.download(
        output = filename,
        url = url,
        integrity = integrity,
        executable = True,
    )
    build_content = """#Generated by swc/repositories.bzl
load("@aspect_rules_swc//swc:toolchain.bzl", "swc_toolchain")
swc_toolchain(
    name = "swc_toolchain",
    target_tool = "%s",
)
""" % filename

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

swc_repositories = repository_rule(
    _swc_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def swc_register_toolchains(name, register = True, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "swc_linux_amd64"
    - create a repository exposing toolchains for each platform like "swc_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "swc"
        register: whether to call through to native.register_toolchains.
            Should be True for WORKSPACE users, but false when used under bzlmod extension
        **kwargs: passed to each swc_repositories call
    """

    for platform in PLATFORMS.keys():
        swc_repositories(
            name = name + "_" + platform,
            platform = platform,
            **kwargs
        )
        if register:
            native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )
