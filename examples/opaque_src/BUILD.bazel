"""Simple use case for swc: transpiling TypeScript using the `swc` rule

Note that this example also depends on the setup in /WORKSPACE at the root of this repository.
"""

load("@aspect_rules_swc//swc:defs.bzl", "swc")
load("@bazel_lib//lib:output_files.bzl", "output_files")
load("@bazel_lib//lib:write_source_files.bzl", "write_source_files")

filegroup(
    name = "opaque_src",
    srcs = ["in.ts"],
)

# In this case we pass a target containing sources so the swc macro can't pre-declare the .js output targets
swc(
    name = "compile",
    srcs = [":opaque_src"],
)

# But we can extract the opaque outputs using output_files to make a friendly label for the output .js file (used below)
output_files(
    name = "in.js",
    paths = ["%s/in.js" % package_name()],
    target = ":compile",
)

# Assert that this predeclared output of "compile" rule matches the expected file.
write_source_files(
    name = "test",
    files = {"expected.js": ":in.js"},
)
