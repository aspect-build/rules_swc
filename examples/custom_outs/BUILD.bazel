"""Demonstrate that js_outs can go to the desired file extensions."""

load("@aspect_bazel_lib//lib:testing.bzl", "assert_outputs")
load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("@aspect_rules_swc//swc:defs.bzl", "swc", "swc_compile")

###############################
# Case 1: js extension variants
# .mts -> .mjs
swc(
    name = "esmodule",
    srcs = ["b.mts"],
    source_maps = True,
)

assert_outputs(
    name = "check_esmodule",
    actual = "esmodule",
    expected = [
        "examples/custom_outs/b.mjs",
        "examples/custom_outs/b.mjs.map",
    ],
)

###############################
# Case 2: user-defined js output paths

[
    # Here, we use the underlying rule rather than the macro, so that we can control what js output
    # paths are pre-declared.
    swc_compile(
        name = "compile_" + format,
        srcs = ["a.ts"],
        args = [
            "--config-json",
            """{"module": {"type": "%s"}}""" % format,
        ],
        # The extension of the outputs can be modified using js_outs
        js_outs = [format + "/a." + ("cjs" if format == "commonjs" else "js")],
        out_dir = format,
    )
    for format in [
        "commonjs",
        "es6",
    ]
]

write_source_files(
    name = "tests",
    files = {
        "expected.cjs": ":commonjs/a.cjs",
        "expected.js": ":es6/a.js",
    },
)
