"""Examples showing how to use SWC plugins

See https://github.com/swc-project/plugins
"""

load("@aspect_bazel_lib//lib:copy_file.bzl", "copy_file")
load("@aspect_bazel_lib//lib:directory_path.bzl", "directory_path")
load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("@aspect_rules_swc//swc:defs.bzl", "swc", "swc_plugin")
load("@npm//:defs.bzl", "npm_link_all_packages")

npm_link_all_packages(name = "node_modules")

# Example 1: Typical usage
# Loads a plugin from an npm package.
# This requires that the package.json includes a main entrypoint pointing at the plugin wasm file.
swc_plugin(
    name = "npm_plugin",
    src = ":node_modules/@swc/plugin-transform-imports",
    # optional plugin config, the JSON object for the plugin passed into jsc.experimental.plugins
    # https://swc.rs/docs/configuration/compilation#jscexperimentalplugins
    config = {
        "lodash": {
            "transform": "lodash/{{member}}",
        },
    },
)

# Now we just pass our swc_plugin target to the plugins attribute:
swc(
    name = "simple",
    srcs = ["in.ts"],
    out_dir = "simple",
    plugins = [":npm_plugin"],
)

# Example 2
# Instead of a plugin from npm, you could reference a wasm file directly.
# This would make sense if you use a rust_binary target to build wasm output.
# However, we don't have an example that uses rules_rust yet,
# see https://github.com/aspect-build/rules_swc/issues/159
# To illustrate the example, we'll just extract the wasm file from the same package we used in
# the previous example.
directory_path(
    name = "plugin_wasm_path",
    directory = ":node_modules/@swc/plugin-transform-imports/dir",
    path = "swc_plugin_transform_imports.wasm",
)

copy_file(
    name = "plugin_wasm",
    src = ":plugin_wasm_path",
    out = "plugin.wasm",
)

swc_plugin(
    name = "file_plugin",
    src = ":plugin_wasm",
    config = {
        "lodash2": {
            "transform": "lodash/test/{{member}}",
        },
    },
)

# Illustrates that the plugins work with swcrc settings in BUILD.bazel.
swc(
    name = "rcdict",
    srcs = ["in.ts"],
    out_dir = "rcdict",
    plugins = [
        ":npm_plugin",
        ":file_plugin",
    ],
    swcrc = {
        "jsc": {
            "target": "es2015",
        },
    },
)

# Illustrates that the plugins work when using a .swcrc file.
swc(
    name = "rc",
    srcs = ["in.ts"],
    out_dir = "rc",
    plugins = [
        ":npm_plugin",
        ":file_plugin",
    ],
    swcrc = "minify.swcrc",
)

# Test that the output of the swc targets above match our "golden" files.
write_source_files(
    name = "test",
    files = {
        "expected_simple.js_": ":simple/in.js",
        "expected_rc.js_": ":rc/in.js",
        "expected_rcdict.js_": ":rcdict/in.js",
    },
)
