"""Simple use case for swc: transpiling .js using the `swc` rule, similar to tsc with 'allowJs'
"""

load("@aspect_rules_swc//swc:defs.bzl", "swc")
load("@bazel_lib//lib:testing.bzl", "assert_outputs")
load("@bazel_lib//lib:write_source_files.bzl", "write_source_files")

# Runs `swc in.js > ../../bazel-bin/examples/js_outs/in.js`
swc(
    name = "compile-js",
    srcs = ["in.js"],
)

# Assert that the output of "compile" rule matches the expected file.
write_source_files(
    name = "test",
    # There is no pre-declared output of the "compile" rule because the input is .js
    # so the the target name is used instead of output file.
    files = {"expected.js": ":compile-js"},
)

# Runs swc on all js files
swc(
    name = "compile-js-exts",
    srcs = [
        "in.cjs",
        "in.d.ts",
        "in.jsx",
        "in.mjs",
        "in_ts.ts",
    ],
    out_dir = "js_outs",
)

# Assert the extensions and output of each js file type via pre-declared outputs.
write_source_files(
    name = "test-x",
    files = {
        "expected.jsx": "js_outs/in.js",
        "expected.mjs": "js_outs/in.mjs",
        "expected.cjs": "js_outs/in.cjs",
        "expected.ts": "js_outs/in_ts.js",
    },
)

swc(
    name = "compile-js-exts-no-js",
    srcs = [
        "in.cjs",
        "in.d.ts",
        "in.jsx",
        "in.mjs",
        "in_ts.ts",
    ],
    allow_js = False,
    out_dir = "no_js_outs",
)

assert_outputs(
    name = "test-x-no-js",
    actual = ":compile-js-exts-no-js",
    expected = [
        "examples/allow_js/no_js_outs/in_ts.js",
    ],
)
